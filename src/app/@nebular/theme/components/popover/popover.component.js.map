{"version":3,"file":"popover.component.js","sourceRoot":"","sources":["../../../../../.ng_build/theme/components/popover/popover.component.ts"],"names":[],"mappings":";;;;;AAMA,OAAO,EAAE,iBAAiB,EAAE,SAAS,EAAE,WAAW,EAAE,KAAK,EAAE,WAAW,EAAE,IAAI,EAAE,SAAS,EAAE,MAAM,eAAe,CAAC;AAC/G,OAAO,EAAE,kBAAkB,EAAE,MAAM,iBAAiB,CAAC;AACrD,OAAO,EAAE,iBAAiB,EAAE,MAAM,iBAAiB,CAAC;;;;;;;;;;;;;IA2GlD,4BAAoB,iBAAoC;QAApC,sBAAiB,GAAjB,iBAAiB,CAAmB;;;;yBArDxB,kBAAkB,CAAC,GAAG;2BAIhC,CAAC;4BAIA,CAAC;KA8CvB;0BAvCG,+CAAe;;;;;kBAAC,EAAE;YACpB,EAAE,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;gBACrB,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,aAAa,CAAC,QAAQ,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;;;;;;;gBAOvD,IAAI,CAAC,iBAAiB,CAAC,aAAa,EAAE,CAAC;aACxC;;;;;IAQH,sBAAI,0CAAU;QALd;;;;aAIK;;;;;;QACL;YACE,MAAM,CAAC,IAAI,CAAC,OAAO,YAAY,WAAW,CAAC;SAC5C;;;OAAA;IAOD,sBAAI,2CAAW;QALf;;;;aAIK;;;;;;QACL;YACE,MAAM,CAAC,IAAI,CAAC,OAAO,YAAY,IAAI,CAAC;SACrC;;;OAAA;IAKD,sBAAI,2CAAW;QAHf;;aAEK;;;;QACL;YACE,MAAM,CAAC,CAAC,IAAI,CAAC,UAAU,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC;SAC9C;;;OAAA;;gBArFF,SAAS,SAAC;oBACT,QAAQ,EAAE,YAAY;oBACtB,SAAS,EAAE,CAAC,yBAAyB,CAAC;oBACtC,QAAQ,EAAE,gZAUT;iBACF;;;;gBApCQ,iBAAiB;;;4BA0CvB,KAAK;4BAML,KAAK;8BAML,KAAK,YACL,WAAW,SAAC,OAAO;gCAGnB,KAAK,YACL,WAAW,SAAC,cAAc;iCAG1B,KAAK,YACL,WAAW,SAAC,eAAe;oCAO3B,SAAS,SAAC,iBAAiB;;6BA5E9B;;SA2Ca,kBAAkB","sourcesContent":["/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n\nimport { ChangeDetectorRef, Component, HostBinding, Input, TemplateRef, Type, ViewChild } from '@angular/core';\nimport { NbPopoverPlacement } from './helpers/model';\nimport { NgComponentOutlet } from '@angular/common';\n\n/**\n * Popover can be one of the following types:\n * template, component or plain js string.\n * So NbPopoverContent provides types alias for this purposes.\n * */\nexport type NbPopoverContent = string | TemplateRef<any> | Type<any>;\n\n/**\n * Popover container.\n * Renders provided content inside.\n *\n * @styles\n *\n * popover-fg\n * popover-bg\n * popover-border\n * popover-shadow\n * */\n@Component({\n  selector: 'nb-popover',\n  styleUrls: ['./popover.component.css'],\n  template: `\n    <span class=\"arrow\"></span>\n\n    <ng-container *ngIf=\"isTemplate\">\n      <ng-container *ngTemplateOutlet=\"content; context: context\"></ng-container>\n    </ng-container>\n    <ng-container *ngIf=\"isComponent\" [ngComponentOutlet]=\"content\"></ng-container>\n    <ng-container *ngIf=\"isPrimitive\">\n      <div class=\"primitive-popover\">{{content}}</div>\n    </ng-container>\n  `,\n})\nexport class NbPopoverComponent {\n\n  /**\n   * Content which will be rendered.\n   * */\n  @Input()\n  content: NbPopoverContent;\n\n  /**\n   * Context which will be passed to rendered component instance.\n   * */\n  @Input()\n  context: Object;\n\n  /**\n   * Popover placement relatively host element.\n   * */\n  @Input()\n  @HostBinding('class')\n  placement: NbPopoverPlacement = NbPopoverPlacement.TOP;\n\n  @Input()\n  @HostBinding('style.top.px')\n  positionTop: number = 0;\n\n  @Input()\n  @HostBinding('style.left.px')\n  positionLeft: number = 0;\n\n  /**\n   * If content type is TemplateRef we're passing context as template outlet param.\n   * But if we have custom component content we're just assigning passed context to the component instance.\n   * */\n  @ViewChild(NgComponentOutlet)\n  set componentOutlet(el) {\n    if (this.isComponent) {\n      Object.assign(el._componentRef.instance, this.context);\n      /**\n       * Change detection have to performed here, because another way applied context\n       * will be rendered on the next change detection loop and\n       * we'll have incorrect positioning. Because rendered component may change its size\n       * based on the context.\n       * */\n      this.changeDetectorRef.detectChanges();\n    }\n  }\n\n  /**\n   * Check that content is a TemplateRef.\n   *\n   * @return boolean\n   * */\n  get isTemplate(): boolean {\n    return this.content instanceof TemplateRef;\n  }\n\n  /**\n   * Check that content is an angular component.\n   *\n   * @return boolean\n   * */\n  get isComponent(): boolean {\n    return this.content instanceof Type;\n  }\n\n  /**\n   * Check that if content is not a TemplateRef or an angular component it means a primitive.\n   * */\n  get isPrimitive(): boolean {\n    return !this.isTemplate && !this.isComponent;\n  }\n\n  constructor(private changeDetectorRef: ChangeDetectorRef) {\n  }\n}\n"]}