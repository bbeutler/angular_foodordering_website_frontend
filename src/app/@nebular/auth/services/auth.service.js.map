{"version":3,"file":"auth.service.js","sourceRoot":"","sources":["../../../../.ng_build/auth/services/auth.service.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\nimport { Inject, Injectable, Injector, Optional } from '@angular/core';\n\nimport { Observable, of as observableOf } from 'rxjs';\nimport { switchMap, map } from 'rxjs/operators';\n\nimport { NbAbstractAuthProvider } from '../providers/abstract-auth.provider';\nimport { NB_AUTH_PROVIDERS } from '../auth.options';\nimport { NbAuthResult } from './auth-result';\nimport { NbTokenService } from './token/token.service';\nimport { NbAuthToken } from './token/token';\n\n/**\n * Common authentication service.\n * Should be used to as an interlayer between UI Components and Auth Providers.\n */\n@Injectable()\nexport class NbAuthService {\n\n  constructor(protected tokenService: NbTokenService,\n              protected injector: Injector,\n              @Optional() @Inject(NB_AUTH_PROVIDERS) protected providers = {}) {\n  }\n\n  /**\n   * Retrieves current authenticated token stored\n   * @returns {Observable<any>}\n   */\n  getToken(): Observable<NbAuthToken> {\n    return this.tokenService.get();\n  }\n\n  /**\n   * Returns true if auth token is presented in the token storage\n   * @returns {Observable<any>}\n   */\n  isAuthenticated(): Observable<boolean> {\n    return this.getToken()\n      .pipe(map((token: NbAuthToken) => token.isValid()));\n  }\n\n  /**\n   * Returns tokens stream\n   * @returns {Observable<NbAuthSimpleToken>}\n   */\n  onTokenChange(): Observable<NbAuthToken> {\n    return this.tokenService.tokenChange();\n  }\n\n  /**\n   * Returns authentication status stream\n   * @returns {Observable<boolean>}\n   */\n  onAuthenticationChange(): Observable<boolean> {\n    return this.onTokenChange()\n      .pipe(map((token: NbAuthToken) => token.isValid()));\n  }\n\n  /**\n   * Authenticates with the selected provider\n   * Stores received token in the token storage\n   *\n   * Example:\n   * authenticate('email', {email: 'email@example.com', password: 'test'})\n   *\n   * @param provider\n   * @param data\n   * @returns {Observable<NbAuthResult>}\n   */\n  authenticate(provider: string, data?: any): Observable<NbAuthResult> {\n    return this.getProvider(provider).authenticate(data)\n      .pipe(\n        switchMap((result: NbAuthResult) => {\n          return this.processResultToken(result);\n        }),\n      );\n  }\n\n  /**\n   * Registers with the selected provider\n   * Stores received token in the token storage\n   *\n   * Example:\n   * register('email', {email: 'email@example.com', name: 'Some Name', password: 'test'})\n   *\n   * @param provider\n   * @param data\n   * @returns {Observable<NbAuthResult>}\n   */\n  register(provider: string, data?: any): Observable<NbAuthResult> {\n    return this.getProvider(provider).register(data)\n      .pipe(\n        switchMap((result: NbAuthResult) => {\n          return this.processResultToken(result);\n        }),\n      );\n  }\n\n  /**\n   * Sign outs with the selected provider\n   * Removes token from the token storage\n   *\n   * Example:\n   * logout('email')\n   *\n   * @param provider\n   * @returns {Observable<NbAuthResult>}\n   */\n  logout(provider: string): Observable<NbAuthResult> {\n    return this.getProvider(provider).logout()\n      .pipe(\n        switchMap((result: NbAuthResult) => {\n          if (result.isSuccess()) {\n            this.tokenService.clear()\n              .pipe(map(() => result));\n          }\n          return observableOf(result);\n        }),\n      );\n  }\n\n  /**\n   * Sends forgot password request to the selected provider\n   *\n   * Example:\n   * requestPassword('email', {email: 'email@example.com'})\n   *\n   * @param provider\n   * @param data\n   * @returns {Observable<NbAuthResult>}\n   */\n  requestPassword(provider: string, data?: any): Observable<NbAuthResult> {\n    return this.getProvider(provider).requestPassword(data);\n  }\n\n  /**\n   * Tries to reset password with the selected provider\n   *\n   * Example:\n   * resetPassword('email', {newPassword: 'test'})\n   *\n   * @param provider\n   * @param data\n   * @returns {Observable<NbAuthResult>}\n   */\n  resetPassword(provider: string, data?: any): Observable<NbAuthResult> {\n    return this.getProvider(provider).resetPassword(data);\n  }\n\n  /**\n   * Sends a refresh token request\n   * Stores received token in the token storage\n   *\n   * Example:\n   * authenticate('email', {email: 'email@example.com', password: 'test'})\n   *\n   * @param {string} provider\n   * @param data\n   * @returns {Observable<NbAuthResult>}\n   */\n  refreshToken(provider: string, data?: any): Observable<NbAuthResult> {\n    return this.getProvider(provider).refreshToken()\n      .pipe(\n        switchMap((result: NbAuthResult) => {\n          return this.processResultToken(result);\n        }),\n      );\n  }\n\n  /**\n   * Gets the selected provider\n   *\n   * Example:\n   * getProvider('email')\n   *\n   * @param {string} provider\n   * @returns {NbAbstractAuthProvider}\n   */\n  protected getProvider(provider: string): NbAbstractAuthProvider {\n    if (!this.providers[provider]) {\n      throw new TypeError(`Nb auth provider '${provider}' is not registered`);\n    }\n    return this.injector.get(this.providers[provider].service);\n  }\n\n  private processResultToken(result: NbAuthResult) {\n    if (result.isSuccess() && result.getRawToken()) {\n      return this.tokenService.setRaw(result.getRawToken())\n        .pipe(\n          switchMap(() => this.tokenService.get()),\n          map((token: NbAuthToken) => {\n            result.setToken(token);\n            return result;\n          }),\n        );\n    }\n\n    return observableOf(result);\n  }\n}\n"]}