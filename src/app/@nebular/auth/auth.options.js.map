{"version":3,"file":"auth.options.js","sourceRoot":"","sources":["../../../.ng_build/auth/auth.options.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,cAAc,EAAE,MAAM,eAAe,CAAC;AAoB/C,IAAM,WAAW,GAAuB,EAAE,CAAC;AAE3C,MAAM,CAAC,IAAM,eAAe,GAAQ;IAClC,KAAK,EAAE;QACL,KAAK,EAAE;YACL,aAAa,EAAE,GAAG;;YAClB,QAAQ,EAAE,OAAO;;YACjB,UAAU,EAAE,IAAI;;YAChB,YAAY,EAAE;;gBACZ,OAAO,EAAE,IAAI;gBACb,KAAK,EAAE,IAAI;aACZ;YACD,WAAW,EAAE,WAAW;SACzB;QACD,QAAQ,EAAE;YACR,aAAa,EAAE,GAAG;YAClB,QAAQ,EAAE,OAAO;YACjB,YAAY,EAAE;gBACZ,OAAO,EAAE,IAAI;gBACb,KAAK,EAAE,IAAI;aACZ;YACD,KAAK,EAAE,IAAI;YACX,WAAW,EAAE,WAAW;SACzB;QACD,eAAe,EAAE;YACf,aAAa,EAAE,GAAG;YAClB,QAAQ,EAAE,OAAO;YACjB,YAAY,EAAE;gBACZ,OAAO,EAAE,IAAI;gBACb,KAAK,EAAE,IAAI;aACZ;YACD,WAAW,EAAE,WAAW;SACzB;QACD,aAAa,EAAE;YACb,aAAa,EAAE,GAAG;YAClB,QAAQ,EAAE,OAAO;YACjB,YAAY,EAAE;gBACZ,OAAO,EAAE,IAAI;gBACb,KAAK,EAAE,IAAI;aACZ;YACD,WAAW,EAAE,WAAW;SACzB;QACD,MAAM,EAAE;YACN,aAAa,EAAE,GAAG;YAClB,QAAQ,EAAE,OAAO;SAClB;QACD,UAAU,EAAE;YACV,QAAQ,EAAE;gBACR,QAAQ,EAAE,IAAI;gBACd,SAAS,EAAE,CAAC;gBACZ,SAAS,EAAE,EAAE;aACd;YACD,KAAK,EAAE;gBACL,QAAQ,EAAE,IAAI;aACf;YACD,QAAQ,EAAE;gBACR,QAAQ,EAAE,KAAK;gBACf,SAAS,EAAE,CAAC;gBACZ,SAAS,EAAE,EAAE;aACd;SACF;KACF;CACF,CAAC;AAEF,MAAM,CAAC,IAAM,eAAe,GAAG,IAAI,cAAc,CAAgB,sBAAsB,CAAC,CAAC;AACzF,MAAM,CAAC,IAAM,oBAAoB,GAAG,IAAI,cAAc,CAAgB,2BAA2B,CAAC,CAAC;AACnG,MAAM,CAAC,IAAM,iBAAiB,GAAG,IAAI,cAAc,CAAkB,wBAAwB,CAAC,CAAC;AAC/F,MAAM,CAAC,IAAM,mBAAmB,GAAG,IAAI,cAAc,CAAc,qBAAqB,CAAC,CAAC;AAC1F,MAAM,CAAC,IAAM,0BAA0B,GAAG,IAAI,cAAc,CAAkB,mCAAmC,CAAC,CAAC","sourcesContent":["import { InjectionToken } from '@angular/core';\nimport { NbAuthToken } from './services';\n\nexport interface NbAuthOptions {\n  forms?: any;\n  providers?: any;\n}\n\nexport interface NbAuthProviders {\n  [key: string]: any;\n}\n\nexport interface NbAuthSocialLink {\n  link?: string,\n  url?: string,\n  target?: string,\n  title?: string,\n  icon?: string,\n}\n\nconst socialLinks: NbAuthSocialLink[] = [];\n\nexport const defaultSettings: any = {\n  forms: {\n    login: {\n      redirectDelay: 500, // delay before redirect after a successful login, while success message is shown to the user\n      provider: 'email',  // provider id key. If you have multiple providers, or what to use your own\n      rememberMe: true,   // whether to show or not the `rememberMe` checkbox\n      showMessages: {     // show/not show success/error messages\n        success: true,\n        error: true,\n      },\n      socialLinks: socialLinks, // social links at the bottom of a page\n    },\n    register: {\n      redirectDelay: 500,\n      provider: 'email',\n      showMessages: {\n        success: true,\n        error: true,\n      },\n      terms: true,\n      socialLinks: socialLinks,\n    },\n    requestPassword: {\n      redirectDelay: 500,\n      provider: 'email',\n      showMessages: {\n        success: true,\n        error: true,\n      },\n      socialLinks: socialLinks,\n    },\n    resetPassword: {\n      redirectDelay: 500,\n      provider: 'email',\n      showMessages: {\n        success: true,\n        error: true,\n      },\n      socialLinks: socialLinks,\n    },\n    logout: {\n      redirectDelay: 500,\n      provider: 'email',\n    },\n    validation: {\n      password: {\n        required: true,\n        minLength: 4,\n        maxLength: 50,\n      },\n      email: {\n        required: true,\n      },\n      fullName: {\n        required: false,\n        minLength: 4,\n        maxLength: 50,\n      },\n    },\n  },\n};\n\nexport const NB_AUTH_OPTIONS = new InjectionToken<NbAuthOptions>('Nebular Auth Options');\nexport const NB_AUTH_USER_OPTIONS = new InjectionToken<NbAuthOptions>('Nebular User Auth Options');\nexport const NB_AUTH_PROVIDERS = new InjectionToken<NbAuthProviders>('Nebular Auth Providers');\nexport const NB_AUTH_TOKEN_CLASS = new InjectionToken<NbAuthToken>('Nebular Token Class');\nexport const NB_AUTH_INTERCEPTOR_HEADER = new InjectionToken<NbAuthProviders>('Nebular Simple Interceptor Header');\n"]}