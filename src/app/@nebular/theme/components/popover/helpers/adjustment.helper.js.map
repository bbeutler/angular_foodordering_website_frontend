{"version":3,"file":"adjustment.helper.js","sourceRoot":"","sources":["../../../../../../.ng_build/theme/components/popover/helpers/adjustment.helper.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable, Inject } from '@angular/core';\n\nimport { NB_WINDOW } from '../../../theme.options';\nimport { NbPositioningHelper } from './positioning.helper';\nimport { NbPopoverAdjustment, NbPopoverPlacement, NbPopoverPosition } from './model';\n\n/**\n * Describes the bypass order of the {@link NbPopoverPlacement} in the {@link NbPopoverAdjustment}.\n * */\nconst NB_ORDERED_PLACEMENTS = {\n  [NbPopoverAdjustment.CLOCKWISE]: [\n    NbPopoverPlacement.TOP,\n    NbPopoverPlacement.RIGHT,\n    NbPopoverPlacement.BOTTOM,\n    NbPopoverPlacement.LEFT,\n  ],\n\n  [NbPopoverAdjustment.COUNTERCLOCKWISE]: [\n    NbPopoverPlacement.TOP,\n    NbPopoverPlacement.LEFT,\n    NbPopoverPlacement.BOTTOM,\n    NbPopoverPlacement.RIGHT,\n  ],\n};\n\n@Injectable()\nexport class NbAdjustmentHelper {\n\n  private window: Window;\n\n  constructor(\n    private positioningHelper: NbPositioningHelper,\n    @Inject(NB_WINDOW) window) {\n      this.window = window as Window;\n    }\n\n  /**\n   * Calculated {@link NbPopoverPosition} based on placed element, host element,\n   * placed element placement and adjustment strategy.\n   *\n   * @param placed {ClientRect} placed element relatively host.\n   * @param host {ClientRect} host element.\n   * @param placement {NbPopoverPlacement} placed element placement relatively host.\n   * @param adjustment {NbPopoverAdjustment} adjustment strategy.\n   *\n   * @return {NbPopoverPosition} calculated position.\n   * */\n  adjust(placed: ClientRect,\n         host: ClientRect,\n         placement: NbPopoverPlacement,\n         adjustment: NbPopoverAdjustment): NbPopoverPosition {\n    const placements = NB_ORDERED_PLACEMENTS[adjustment].slice();\n    const ordered = this.orderPlacements(placement, placements);\n    const possible = ordered.map(pl => ({\n      position: this.positioningHelper.calcPosition(placed, host, pl),\n      placement: pl,\n    }));\n\n    return this.chooseBest(placed, possible);\n  }\n\n  /**\n   * Searches first adjustment which doesn't go beyond the viewport.\n   *\n   * @param placed {ClientRect} placed element relatively host.\n   * @param possible {NbPopoverPosition[]} possible positions list ordered according to adjustment strategy.\n   *\n   * @return {NbPopoverPosition} calculated position.\n   * */\n  private chooseBest(placed: ClientRect, possible: NbPopoverPosition[]): NbPopoverPosition {\n    return possible.find(adjust => this.inViewPort(placed, adjust)) || possible.shift();\n  }\n\n  /**\n   * Finds out is adjustment doesn't go beyond of the view port.\n   *\n   * @param placed {ClientRect} placed element relatively host.\n   * @param position {NbPopoverPosition} position of the placed element.\n   *\n   * @return {boolean} true if placed element completely viewport.\n   * */\n  private inViewPort(placed: ClientRect, position: NbPopoverPosition): boolean {\n    return position.position.top - this.window.pageYOffset > 0\n      && position.position.left - this.window.pageXOffset > 0\n      && position.position.top + placed.height < this.window.innerHeight + this.window.pageYOffset\n      && position.position.left + placed.width < this.window.innerWidth + this.window.pageXOffset;\n  }\n\n  /**\n   * Reorder placements list to make placement start point and fit {@link NbPopoverAdjustment}\n   *\n   * @param placement {NbPopoverPlacement} active placement\n   * @param placements {NbPopoverPlacement[]} placements list according to the active adjustment strategy.\n   *\n   * @return {NbPopoverPlacement[]} correctly ordered placements list.\n   *\n   * @example order placements for {@link NbPopoverPlacement#RIGHT} and {@link NbPopoverAdjustment#CLOCKWISE}\n   * ```\n   * const placements = NB_ORDERED_PLACEMENTS[NbPopoverAdjustment.CLOCKWISE];\n   * const ordered = orderPlacement(NbPopoverPlacement.RIGHT, placements);\n   *\n   * expect(ordered).toEqual([\n   *  NbPopoverPlacement.RIGHT,\n   *  NbPopoverPlacement.BOTTOM,\n   *  NbPopoverPlacement.LEFT,\n   *  NbPopoverPlacement.TOP,\n   * ]);\n   * ```\n   * */\n  private orderPlacements(placement: NbPopoverPlacement, placements: NbPopoverPlacement[]): NbPopoverPlacement[] {\n    const index = placements.indexOf(placement);\n    const start = placements.splice(index, placements.length);\n    return start.concat(...placements);\n  }\n}\n"]}