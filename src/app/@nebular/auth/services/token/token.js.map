{"version":3,"file":"token.js","sourceRoot":"","sources":["../../../../../.ng_build/auth/services/token/token.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,OAAO,EAAE,eAAe,EAAE,MAAM,eAAe,CAAC;AAYhD,MAAM,wBAAwB,UAAwB,EAAE,KAAa;IACnE,MAAM,CAAC,IAAI,UAAU,CAAC,KAAK,CAAC,CAAC;CAC9B;;;;AAKD;;;AAAA;IAEE,2BAAqB,KAAa;QAAb,UAAK,GAAL,KAAK,CAAQ;KACjC;IAED;;;OAGG;;;;;IACH,oCAAQ;;;;IAAR;QACE,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC;KACnB;IAED;;;OAGG;;;;;IACH,mCAAO;;;;IAAP;QACE,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC;KACrB;IAED;;;OAGG;;;;;IACH,oCAAQ;;;;IAAR;QACE,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC;KACvC;4BA9CH;IA+CC,CAAA;;;;AA5BD,6BA4BC;;;;AAKD;;;AAAA;IAAoC,kCAAiB;;;;IAEnD;;;OAGG;;;;;IACH,mCAAU;;;;IAAV;QAEE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;YAChB,MAAM,IAAI,KAAK,CAAC,6CAA6C,CAAC,CAAC;SAChE;QAED,IAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAEpC,EAAE,CAAC,CAAC,KAAK,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;YACvB,MAAM,IAAI,KAAK,CAAC,eAAa,IAAI,CAAC,KAAK,6DAA0D,CAAC,CAAC;SACpG;QAED,IAAI,OAAO,CAAC;QACZ,IAAI,CAAC;YACH,OAAO,GAAG,eAAe,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;SACrC;QAAC,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC;YACX,MAAM,IAAI,KAAK,CAAC,eAAa,IAAI,CAAC,KAAK,kDAA+C,CAAC,CAAC;SACzF;QAED,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;YACb,MAAM,IAAI,KAAK,CAAC,eAAa,IAAI,CAAC,KAAK,mDAAgD,CAAC,CAAC;SAC1F;QAED,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;KAC5B;IAED;;;OAGG;;;;;IACH,wCAAe;;;;IAAf;QACE,IAAM,OAAO,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;QAClC,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YACnC,MAAM,CAAC,IAAI,CAAC;SACb;QAED,IAAM,IAAI,GAAG,IAAI,IAAI,CAAC,CAAC,CAAC,CAAC;QACzB,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;QAEhC,MAAM,CAAC,IAAI,CAAC;KACb;IAED;;;OAGG;;;;;IACH,gCAAO;;;;IAAP;QACE,MAAM,CAAC,iBAAM,OAAO,WAAE,IAAI,CAAC,CAAC,IAAI,CAAC,eAAe,EAAE,IAAI,IAAI,IAAI,EAAE,GAAG,IAAI,CAAC,eAAe,EAAE,CAAC,CAAC;KAC5F;yBA1GH;EAoDoC,iBAAiB,EAuDpD,CAAA;;;;AAvDD,0BAuDC","sourcesContent":["import { urlBase64Decode } from '../../helpers';\n\nexport interface NbAuthToken {\n  getValue(): string;\n  isValid(): boolean;\n  toString(): string;\n}\n\nexport interface NbTokenClass {\n  new (raw: string): NbAuthToken\n}\n\nexport function nbCreateToken(tokenClass: NbTokenClass, token: string) {\n  return new tokenClass(token);\n}\n\n/**\n * Wrapper for simple (text) token\n */\nexport class NbAuthSimpleToken implements NbAuthToken {\n\n  constructor(readonly token: string) {\n  }\n\n  /**\n   * Returns the token value\n   * @returns string\n   */\n  getValue(): string {\n    return this.token;\n  }\n\n  /**\n   * Is non empty and valid\n   * @returns {boolean}\n   */\n  isValid(): boolean {\n    return !!this.token;\n  }\n\n  /**\n   * Validate value and convert to string, if value is not valid return empty string\n   * @returns {string}\n   */\n  toString(): string {\n    return !!this.token ? this.token : '';\n  }\n}\n\n/**\n * Wrapper for JWT token with additional methods.\n */\nexport class NbAuthJWTToken extends NbAuthSimpleToken {\n\n  /**\n   * Returns payload object\n   * @returns any\n   */\n  getPayload(): any {\n\n    if (!this.token) {\n      throw new Error('Cannot extract payload from an empty token.');\n    }\n\n    const parts = this.token.split('.');\n\n    if (parts.length !== 3) {\n      throw new Error(`The token ${this.token} is not valid JWT token and must consist of three parts.`);\n    }\n\n    let decoded;\n    try {\n      decoded = urlBase64Decode(parts[1]);\n    } catch (e) {\n      throw new Error(`The token ${this.token} is not valid JWT token and cannot be parsed.`);\n    }\n\n    if (!decoded) {\n      throw new Error(`The token ${this.token} is not valid JWT token and cannot be decoded.`);\n    }\n\n    return JSON.parse(decoded);\n  }\n\n  /**\n   * Returns expiration date\n   * @returns Date\n   */\n  getTokenExpDate(): Date {\n    const decoded = this.getPayload();\n    if (!decoded.hasOwnProperty('exp')) {\n      return null;\n    }\n\n    const date = new Date(0);\n    date.setUTCSeconds(decoded.exp);\n\n    return date;\n  }\n\n  /**\n   * Is data expired\n   * @returns {boolean}\n   */\n  isValid(): boolean {\n    return super.isValid() && (!this.getTokenExpDate() || new Date() < this.getTokenExpDate());\n  }\n}\n"]}