{"version":3,"file":"token-storage.js","sourceRoot":"","sources":["../../../../../.ng_build/auth/services/token/token-storage.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAEnD,OAAO,EAAE,mBAAmB,EAAE,MAAM,oBAAoB,CAAC;AACzD,OAAO,EAAe,aAAa,EAAgB,MAAM,SAAS,CAAC;AAEnE,IAAA;;;yBALA;IAWC,CAAA;AAND,0BAMC;;;;;;;;;;;;;;;;;IAsBC,6BAAmD;QAAA,eAAU,GAAV,UAAU;mBAF7C,gBAAgB;KAG/B;IAED;;;OAGG;;;;;IACH,iCAAG;;;;IAAH;QACE,MAAM,CAAC,aAAa,CAAC,IAAI,CAAC,UAAU,EAAE,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;KACvE;IAED;;;OAGG;;;;;IACH,iCAAG;;;;IAAH,UAAI,KAAkB;QACpB,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,EAAE,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC;KAClD;IAED;;;OAGG;;;;;IACH,oCAAM;;;;IAAN,UAAO,KAAa;QAClB,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;KACvC;IAED;;OAEG;;;;IACH,mCAAK;;;IAAL;QACE,YAAY,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;KACnC;;gBArCF,UAAU;;;;gDAKI,MAAM,SAAC,mBAAmB;;8BAjCzC;;SA6Ba,mBAAmB","sourcesContent":["import { Inject, Injectable } from '@angular/core';\n\nimport { NB_AUTH_TOKEN_CLASS } from '../../auth.options';\nimport { NbAuthToken, nbCreateToken, NbTokenClass } from './token';\n\nexport abstract class NbTokenStorage {\n\n  abstract get(): NbAuthToken;\n  abstract set(token: NbAuthToken);\n  abstract setRaw(token: string);\n  abstract clear();\n}\n\n/**\n * Service that uses browser localStorage as a storage.\n *\n * The token storage is provided into auth module the following way:\n * ```\n * { provide: NbTokenStorage, useClass: NbTokenLocalStorage },\n * ```\n *\n * If you need to change the storage behaviour or provide your own - just extend your class from basic `NbTokenStorage`\n * or `NbTokenLocalStorage` and provide in your `app.module`:\n * ```\n * { provide: NbTokenStorage, useClass: NbTokenCustomStorage },\n * ```\n *\n */\n@Injectable()\nexport class NbTokenLocalStorage implements NbTokenStorage {\n\n  protected key = 'auth_app_token';\n\n  constructor(@Inject(NB_AUTH_TOKEN_CLASS) protected tokenClass: NbTokenClass) {\n  }\n\n  /**\n   * Returns token from localStorage\n   * @returns {NbAuthToken}\n   */\n  get(): NbAuthToken {\n    return nbCreateToken(this.tokenClass, localStorage.getItem(this.key));\n  }\n\n  /**\n   * Sets token to localStorage\n   * @param {NbAuthToken} token\n   */\n  set(token: NbAuthToken) {\n    localStorage.setItem(this.key, token.toString());\n  }\n\n  /**\n   * Sets raw (string) token to localStorage\n   * @param {string} token\n   */\n  setRaw(token: string) {\n    localStorage.setItem(this.key, token);\n  }\n\n  /**\n   * Clears token from localStorage\n   */\n  clear() {\n    localStorage.removeItem(this.key);\n  }\n}\n"]}